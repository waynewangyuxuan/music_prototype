{"ast":null,"code":"var _jsxFileName = \"/Users/waynewang/music_prototype/music/src/components/PlaybackControls.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaybackControls = ({\n  items\n}) => {\n  _s();\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Map each song name to a color\n  const backgroundColors = {\n    'Shine On You Crazy Diamond': '#1e3a5f',\n    'Comfortably Numb': '#4b3b6b',\n    'Wish You Were Here': '#5c6b73',\n    'Time': '#7c5c55',\n    'Money': '#8f715a',\n    'Another Brick in the Wall, Part 2': '#3b3f52',\n    'Hey You': '#46494d',\n    'Us and Them': '#2f3e46'\n    // Add more colors for other songs as needed\n  };\n  const playTrack = index => {\n    setCurrentTrackIndex(index);\n    setIsPlaying(true);\n  };\n  const pauseTrack = () => {\n    setIsPlaying(false);\n  };\n  const nextTrack = () => {\n    if (currentTrackIndex !== null && currentTrackIndex < items.length - 1) {\n      setCurrentTrackIndex(currentTrackIndex + 1);\n      setIsPlaying(true);\n    }\n  };\n  const previousTrack = () => {\n    if (currentTrackIndex > 0) {\n      setCurrentTrackIndex(currentTrackIndex - 1);\n      setIsPlaying(true);\n    }\n  };\n\n  // Get the background color based on the current song\n  const currentSong = items[currentTrackIndex];\n  const backgroundColor = currentSong ? backgroundColors[currentSong.name] || '#ffffff' : '#ffffff';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playback-controls\",\n    style: {\n      backgroundColor\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentTrackIndex !== null && currentSong ? `Now Playing: ${currentSong.name}` : 'No track playing'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: previousTrack,\n      disabled: currentTrackIndex <= 0,\n      children: \"Previous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), isPlaying ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: pauseTrack,\n      children: \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => playTrack(currentTrackIndex !== null && currentTrackIndex !== void 0 ? currentTrackIndex : 0),\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextTrack,\n      disabled: currentTrackIndex === null || currentTrackIndex >= items.length - 1,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaybackControls, \"KKXW/ZEabkjMzbwB3J1iCeHIuNY=\");\n_c = PlaybackControls;\nexport default PlaybackControls;\nvar _c;\n$RefreshReg$(_c, \"PlaybackControls\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PlaybackControls","items","_s","currentTrackIndex","setCurrentTrackIndex","isPlaying","setIsPlaying","backgroundColors","playTrack","index","pauseTrack","nextTrack","length","previousTrack","currentSong","backgroundColor","name","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/waynewang/music_prototype/music/src/components/PlaybackControls.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../styles/components.css';\n\nconst PlaybackControls = ({ items }) => {\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Map each song name to a color\n  const backgroundColors = {\n    'Shine On You Crazy Diamond': '#1e3a5f',\n    'Comfortably Numb': '#4b3b6b',\n    'Wish You Were Here': '#5c6b73',\n    'Time': '#7c5c55',\n    'Money': '#8f715a',\n    'Another Brick in the Wall, Part 2': '#3b3f52',\n    'Hey You': '#46494d',\n    'Us and Them': '#2f3e46'\n    // Add more colors for other songs as needed\n  };\n\n  const playTrack = (index) => {\n    setCurrentTrackIndex(index);\n    setIsPlaying(true);\n  };\n\n  const pauseTrack = () => {\n    setIsPlaying(false);\n  };\n\n  const nextTrack = () => {\n    if (currentTrackIndex !== null && currentTrackIndex < items.length - 1) {\n      setCurrentTrackIndex(currentTrackIndex + 1);\n      setIsPlaying(true);\n    }\n  };\n\n  const previousTrack = () => {\n    if (currentTrackIndex > 0) {\n      setCurrentTrackIndex(currentTrackIndex - 1);\n      setIsPlaying(true);\n    }\n  };\n\n  // Get the background color based on the current song\n  const currentSong = items[currentTrackIndex];\n  const backgroundColor = currentSong ? backgroundColors[currentSong.name] || '#ffffff' : '#ffffff';\n\n  return (\n    <div className=\"playback-controls\" style={{ backgroundColor }}>\n      <p>\n        {currentTrackIndex !== null && currentSong\n          ? `Now Playing: ${currentSong.name}`\n          : 'No track playing'}\n      </p>\n      <button onClick={previousTrack} disabled={currentTrackIndex <= 0}>Previous</button>\n      {isPlaying ? (\n        <button onClick={pauseTrack}>Pause</button>\n      ) : (\n        <button onClick={() => playTrack(currentTrackIndex ?? 0)}>Play</button>\n      )}\n      <button onClick={nextTrack} disabled={currentTrackIndex === null || currentTrackIndex >= items.length - 1}>Next</button>\n    </div>\n  );\n};\n\nexport default PlaybackControls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}